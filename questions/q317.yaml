question: |-
  ```rust
  use std::collections::HashMap;

  fn main() {
      let data = vec![("a", 1), ("b", 2), ("a", 3), ("c", 4), ("b", 5)];
      
      let mut map = HashMap::new();
      for (key, value) in data {
          map.entry(key).and_modify(|v| *v += value).or_insert(value);
      }
      
      let sum: i32 = map.values().sum();
      println!("{}", sum);
  }
  ```

  What does this program print?
answers:
- '15'
- '11'
- '12'
- '9'
correct_answer: 0
expected_output:
- '15'
explanation: |-
  This question tests understanding of HashMap's entry API, specifically the
  `and_modify` and `or_insert` pattern for accumulating values.

  The code processes a vector of key-value pairs and builds a HashMap that
  accumulates values for duplicate keys. The `entry(key).and_modify(|v| *v +=
  value).or_insert(value)` pattern works as follows:
  - If the key exists, `and_modify` adds the new value to the existing value
  - If the key doesn't exist, `or_insert` inserts the new value

  Processing the data:
  - ("a", 1): Key "a" doesn't exist, insert 1 → map: {"a": 1}
  - ("b", 2): Key "b" doesn't exist, insert 2 → map: {"a": 1, "b": 2}
  - ("a", 3): Key "a" exists with value 1, add 3 → map: {"a": 4, "b": 2}
  - ("c", 4): Key "c" doesn't exist, insert 4 → map: {"a": 4, "b": 2, "c": 4}
  - ("b", 5): Key "b" exists with value 2, add 5 → map: {"a": 4, "b": 7, "c": 4}

  The final map contains {"a": 4, "b": 7, "c": 4}, and the sum of all values is 4
  + 7 + 4 = 15.

  The key takeaway is that the entry API provides an ergonomic way to handle the
  "update if exists, insert if not" pattern, which is common when building
  frequency maps or accumulating values by key.
