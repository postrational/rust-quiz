question: |-
  ```rust
  fn main() {
      let mut v = vec![1, 2, 3, 4];
      v.retain(|&x| x % 2 == 0);
      println!("{:?}", v);
  }
  ```

  What will this code print?
answers:
- '[1, 3]'
- '[2, 4]'
- '[1, 2, 3, 4]'
- '[]'
correct_answer: 1
expected_output:
- '[2, 4]'
explanation: |-
  This question tests understanding of the `retain` method on vectors in Rust. The
  `retain` method modifies a vector in-place, keeping only the elements for which
  the provided closure returns `true`.

  In this code, the closure `|&x| x % 2 == 0` checks whether each element is even
  (divisible by 2 with no remainder). Starting with the vector `[1, 2, 3, 4]`, the
  method evaluates each element:
  - `1 % 2 == 0` evaluates to `false`, so 1 is removed
  - `2 % 2 == 0` evaluates to `true`, so 2 is kept
  - `3 % 2 == 0` evaluates to `false`, so 3 is removed
  - `4 % 2 == 0` evaluates to `true`, so 4 is kept

  The resulting vector contains only the even numbers: `[2, 4]`.

  The key takeaway is that `retain` is an efficient way to filter a vector
  in-place based on a predicate, removing elements that don't satisfy the
  condition while preserving those that do.
