question: |-
  ```rust
  // mylib/src/lib.rs
  mod mylib {
      pub mod utils {
          pub(crate) fn compute_offset() -> i32 { 42 }
          pub fn calculate_sum() -> i32 { 24 }
      }
  }
  ```

  ```rust
  // main.rs (separate binary crate)
  fn main() {
      use mylib::utils;
      println!("{}", utils::calculate_sum());
      println!("{}", utils::compute_offset());
  }
  ```

  What happens when this code is compiled?
answers:
- Both function calls work, printing "24" then "42"
- Only the first call works, second fails with "function is private"
- Only the second call works, first fails with "function is private"
- Both calls fail because the `utils` module is not accessible
correct_answer: 1
expected_output:
- 'private function'
explanation: |-
  This question tests understanding of Rust's `pub(crate)` visibility modifier and
  crate boundaries. The `pub(crate)` modifier makes an item public within the
  defining crate but private across crate boundaries.

  In this code, both `compute_offset()` (marked `pub(crate)`) and
  `calculate_sum()` (marked `pub`) are defined in the `mylib` module. Since
  `main()` is in the same crate as the `mylib` module, both functions are
  accessible. The `pub(crate)` visibility allows access from anywhere within the
  same crate, so both function calls succeed and print "24" then "42".

  The key distinction is that if `main.rs` were in a separate crate that depends
  on `mylib` as an external library, then only `calculate_sum()` would be
  accessible. The `compute_offset()` function would be private across the crate
  boundary, resulting in a compilation error.

  The key takeaway is that `pub(crate)` creates crate-local public visibility -
  it's useful for creating internal APIs within a crate that should be accessible
  across modules in the same crate but not exposed to external users of the
  library. This allows library authors to maintain clear boundaries between public
  API and internal implementation details.
