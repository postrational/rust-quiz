question: |-
  ```rust
  fn main() {
      let numbers = [1, 2, 3, 4, 5];
      let windows: Vec<Vec<i32>> = numbers
          .windows(3)
          .map(|window| window.to_vec())
          .collect();
          
      println!("{}", windows.len());
  }
  ```

  What does this program print?
answers:
- '2'
- '3'
- '5'
- Compilation error
correct_answer: 1
expected_output:
- '3'
explanation: |-
  This question tests understanding of the `windows()` method in Rust, which
  creates a sliding window iterator over a slice. The `windows(n)` method yields
  overlapping subslices of size `n` from the original slice.

  For the array `[1, 2, 3, 4, 5]` with `windows(3)`, the method produces three
  overlapping windows:
  - Window 1: [1, 2, 3]
  - Window 2: [2, 3, 4]
  - Window 3: [3, 4, 5]

  The general formula for the number of windows is: `array_length - window_size +
  1`. In this case: `5 - 3 + 1 = 3`.

  Each window is a slice (`&[i32]`) that is then converted to a `Vec<i32>` using
  `to_vec()`, and all windows are collected into a `Vec<Vec<i32>>`. The program
  prints the length of this outer vector, which is 3.

  The key takeaway is that `windows()` creates overlapping views of the data,
  where each window slides by one position. This is useful for analyzing patterns
  in sequences, such as calculating moving averages, detecting trends, or
  comparing adjacent groups of elements.
